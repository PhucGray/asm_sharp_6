@page "/search"
@using Microsoft.AspNetCore.WebUtilities
@using Blazored.LocalStorage
@using Microsoft.Extensions.Logging
@using share.Models
@inject ILocalStorageService localStorage
@inject ILogger<Index> logger
@inject NavigationManager Navigation
@inject IToastService toastService
@inject HttpClient Http


<h3 class="ms-3 my-3">Tìm kiếm: @keyword</h3>

@if(loading)
{
    <span class="spinner-border spinner-border mx-auto mt-5" role="status" aria-hidden="true"></span>
}
else
{
    @if(foods != null && foods.Count > 0)
     {
<div class="foods">
         @foreach (var food in foods)
         {
            <div class="food" style="cursor: default;">
                <img class="food-img" src="@food.Image"/>
                <div class="food-name">@food.Name</div>
                <div class="food-price">@(String.Format("{0:#,##0}", food.Price)) VNĐ</div>
                <div class="d-flex justify-content-center">
                        <button class="btn btn-secondary" @onclick="(() => decrease(food))">-</button>
                        <div style="border: 1px solid #d1d1d1;display: grid;place-items: center;width: 36px;">@food.Quantity</div>
                        <button class="btn btn-warning" @onclick="(() => increase(food))">+</button>
                    </div>
                    @if(food.Status)
                    {
                        <button class="btn btn-primary mt-3" @onclick="(() => addToCart(food))">Thêm vào giỏ hàng</button>
                    } else
                    {
                        <button class="btn btn-secondary mt-3 disabled" disabled>Hết hàng</button>
                    }
            </div>
            }
</div>

        } else
        {
            <div class="mt-3 text-center">Không tìm thấy món ăn</div>
        }
}




@code {
    private string keyword { get; set; } = "";
    private bool loading { get; set; } = true;

    private List<FoodModel> foods { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("keyword", out var _keyword))
        {
            keyword = _keyword.ToString();
            foods = await Http.GetFromJsonAsync<List<FoodModel>>("https://localhost:44329/api/foods/search?keyword="+_keyword.ToString());
            loading = false;
        }
    }

    private void decrease(FoodModel food)
    {
        if(food.Quantity > 1)
        {
            food.Quantity--;
        }
    }

    private void increase(FoodModel food)
    {
        food.Quantity++;
    }

    private async Task addToCart(FoodModel food)
    {
        bool hasCart = await localStorage.ContainKeyAsync("cart");

        if(!hasCart)
        {
            await localStorage.SetItemAsync("cart", new List<FoodModel>());
        } 
        var cart = await localStorage.GetItemAsync<List<FoodModel>>("cart");

        if(cart.Any(f => f.Id == food.Id))
        {
            List<FoodModel> newCart = new List<FoodModel>();
            foreach (var item in cart)
            {
                if(item.Id == food.Id)
                {
                    item.Quantity += food.Quantity;
                }

                newCart.Add(item);
            }

            await localStorage.SetItemAsync("cart", newCart);
        } else
        {
            cart.Add(food);
            await localStorage.SetItemAsync("cart", cart);
        }

        toastService.ShowSuccess("Thêm sản phẩm vào giỏ thành công", "Thông báo");
    }
}
