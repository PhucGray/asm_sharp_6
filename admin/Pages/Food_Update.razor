@page "/food/update/{id:int}"
@using Blazored.Toast.Services
@using Microsoft.Extensions.Logging
@using share.Models.UI
@using share.Models
@using static System.Net.WebRequestMethods
@inject IToastService toastService
@inject HttpClient Http
@inject ILogger<Food_Add> logger


<EditForm Model="@foodModel" OnValidSubmit="@handleSubmit" class="mt-3 px-5">
    <DataAnnotationsValidator  />
    <div class="row col-12">
        <div class="col-4">
            <img src="@(foodImg != "" ? foodImg : "images/food-placeholder.png")" style="width: 100%;"/> <br />
            <InputFile class="form-control" OnChange="@OnInputFileChanged" accept="image/png, image/jpeg, image/gif" id="inputFile" />
            <InputText id="name" @bind-Value="foodModel.Image" class="form-control" style="position: absolute; top: -1000px;"/>
            <div class="text-danger">
                <ValidationMessage  For="@(() => foodModel.Image)" />
            </div>
        </div>

        <div class="col-8">
            <label for="name" class="form-label">Tên</label>
            <InputText id="name" @bind-Value="foodModel.Name" class="form-control" />
            <div class="text-danger">
                <ValidationMessage For="@(() => foodModel.Name)" />
            </div>
    
            <label for="price" class="form-label">Giá</label>
            <InputNumber id="price" @bind-Value="foodModel.Price" class="form-control" />
            <div class="text-danger">
                <ValidationMessage For="@(() => foodModel.Price)" />
            </div>

            <div>
                <label for="status" class="form-label">Trạng thái</label>
                <div>
                    <div class="form-check form-check-inline">
                      <input checked="@(foodModel.Status == true)" @onclick="(() => foodModel.Status = true)" class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                      <label @onclick="(() => foodModel.Status = true)" class="form-check-label" for="flexRadioDefault1">
                        Còn hàng
                      </label>
                    </div>
                    
                    <div class="form-check form-check-inline">
                      <input checked="@(foodModel.Status == false)" @onclick="(() => foodModel.Status = false)"  class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2">
                      <label @onclick="(() => foodModel.Status = false)" class="form-check-label" for="flexRadioDefault2">
                        Hết hàng
                      </label>
                    </div>
                </div>
            </div>
    

              <div>
                <label for="status" class="form-label">Ẩn</label>
                <div>
                    <div class="form-check form-check-inline">
                      <input checked="@(foodModel.IsDeleted == true)" @onclick="(() => foodModel.IsDeleted = true)" class="form-check-input" type="radio" name="a" id="flexRadioDefault3">
                      <label @onclick="(() => foodModel.IsDeleted = true)" class="form-check-label" for="flexRadioDefault3">
                        Có
                      </label>
                    </div>
                    
                    <div class="form-check form-check-inline">
                      <input checked="@(foodModel.IsDeleted == false)" @onclick="(() => foodModel.IsDeleted = false)"  class="form-check-input" type="radio" name="a" id="flexRadioDefault4">
                      <label @onclick="(() => foodModel.IsDeleted = false)" class="form-check-label" for="flexRadioDefault4">
                        Không
                      </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary w-50 py-2 mt-4 d-block mx-auto" disabled=@loading>
        @if(loading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        } else
        {
            <span>Cập nhật</span>
        }
    </button>
</EditForm>


@code {
    [Parameter]
    public int id { get; set; }

    private bool loading { get; set; } = false;
    private FoodModel foodModel { get; set; }
    private string foodImg { get; set; } = "";
    private ImageModel fileBase64;

    private bool isDeleted { get; set; } = false;

    private void handleStatusChange(bool value)
    {
        logger.LogInformation(value.ToString());
        foodModel.Status = value;
    }

    protected override async Task OnInitializedAsync()
    {
        foodModel = await Http.GetFromJsonAsync<FoodModel>("https://localhost:44329/api/foods/" + id.ToString());
        foodImg = foodModel.Image;
    }

    private async Task handleSubmit()
    {
        loading = true;

        foodModel.Image = foodImg;

        using (var msg = await Http.PutAsJsonAsync("https://localhost:44329/api/foods/" + id.ToString(), foodModel)) 

        loading = false;
        toastService.ShowSuccess("Sửa món ăn thành công", "Thông báo");
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;

        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480);
        var buf = new byte[resizedFile.Size]; 
        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf); 
        }
        fileBase64 = new ImageModel { Base64data = Convert.ToBase64String(buf), ContentType = file.ContentType, FileName = file.Name };
        foodImg = $"data:{fileBase64.ContentType};base64,{fileBase64.Base64data}";
        foodModel.Image = foodImg;
    }
}
